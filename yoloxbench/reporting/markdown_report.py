"""
Create a rich Markdown report (tables + plots) from YOLOxBench runs.

Usage
-----
$ yox report <csv> [<run1> <run2> ...]
Outputs:
  cmp_runs/<name>_report/
      report.md
      bar_metrics.png
      pr_curves/
      confusion_matrices/
"""
from __future__ import annotations
from pathlib import Path
from datetime import datetime
import shutil
import pandas as pd
import matplotlib.pyplot as plt

# Define which metrics to include in the report
METRICS = [
    "metrics/mAP50",
    "metrics/mAP50-95",
    "metrics/precision",
    "metrics/recall",
]

# Header template for Markdown report
_MD_HEADER = """# 📋 YOLOxBench Comparison Report

*Generated: {date}*

**Compared Runs:** {runs}

---

## 🧮 Metrics Summary

| Run | {cols} |
|-----|{dashes}|
{summary_rows}

---

## 🏆 Leaderboard Bars

![Metrics Bar]({bar_png})

---

## 📈 Precision‑Recall Curves
{pr_section}

---

## 🔀 Confusion Matrices
{cm_section}

---

> *Report auto‑generated by **YOLOxBench**.*
"""

def _ensure_dir(p: Path) -> Path:
    p.mkdir(parents=True, exist_ok=True)
    return p


def _plot_bar(df: pd.DataFrame, metric: str, out: Path):
    plt.figure(figsize=(8, 4))
    df.plot.bar(x="run", y=metric, legend=False, ax=plt.gca())
    plt.ylabel(metric)
    plt.tight_layout()
    plt.savefig(out)
    plt.close()


def make_markdown(csv_path: Path, runs: list[str] | None = None) -> Path:
    """
    Generate a Markdown report comparing the given runs.

    Parameters
    ----------
    csv_path : Path
        CSV file with a "run" column and metric columns.
    runs : list[str] | None
        If provided, labels for the runs in order; otherwise derived from CSV.
    """
    csv_path = Path(csv_path)
    df = pd.read_csv(csv_path)

    # Infer runs from the CSV if not provided
    if runs is None:
        runs = df["run"].tolist()

    # Setup output folder
    report_dir = _ensure_dir(csv_path.with_suffix("_report"))

    # 1. Leaderboard bar for primary metric
    bar_png = report_dir / "bar_metrics.png"
    primary = METRICS[0]
    _plot_bar(df, primary, bar_png)

    # 2. Copy PR and confusion matrix images
    pr_dir = _ensure_dir(report_dir / "pr_curves")
    cm_dir = _ensure_dir(report_dir / "confusion_matrices")
    pr_section, cm_section = [], []
    for run in runs:
        # Paths based on run name
        src_run = Path(csv_path.parent.parent) / "detect" / run
        # PR curve
        src_pr = src_run / "PR_curve.png"
        if src_pr.exists():
            dst_pr = pr_dir / f"{run}_PR.png"
            shutil.copy(src_pr, dst_pr)
            pr_section.append(f"![{run} PR]({dst_pr.relative_to(report_dir)})")
        # Confusion matrix
        src_cm = src_run / "confusion_matrix.png"
        if src_cm.exists():
            dst_cm = cm_dir / f"{run}_CM.png"
            shutil.copy(src_cm, dst_cm)
            cm_section.append(f"![{run} CM]({dst_cm.relative_to(report_dir)})")

    pr_text = "\n".join(pr_section) or "_No PR curves found._\n"
    cm_text = "\n".join(cm_section) or "_No confusion matrices found._\n"

    # 3. Summary table rows
    cols_header = " | ".join([m.split("/")[-1] for m in METRICS])
    dashes = "|" + "---|" * (len(METRICS)+1)
    summary_rows = []
    for _, row in df.iterrows():
        vals = []
        for m in METRICS:
            v = row.get(m)
            vals.append(f"{v:.3f}" if pd.notna(v) else "—")
        summary_rows.append(f"| {row['run']} | {' | '.join(vals)} |")
    summary_text = "\n".join(summary_rows)

    # 4. Populate the Markdown
    md = _MD_HEADER.format(
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        runs=", ".join(runs),
        cols=cols_header,
        dashes=dashes,
        summary_rows=summary_text,
        bar_png=bar_png.name,
        pr_section=pr_text,
        cm_section=cm_text,
    )

    report_md = report_dir / "report.md"
    report_md.write_text(md, encoding="utf-8")
    return report_md